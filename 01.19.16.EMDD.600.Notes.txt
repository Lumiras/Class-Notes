#Heuristics Evaluations

[Jakob Nielsen's 10 Usability Heuristics](http://tfa.stanford.edu/download/TenUsabilityHeuristics.pdf)

Heuristic: a holistic approach to systematically inspect a system

- Discount usability engineering method for a quick, cheap and easy evaluation
- Systematic inspection of a user interface design for usability
- Find and characterize usability problems in a design so they can be addressed as part of the iterative design process
- Small set of evaluators examine the interface and judge its compliance with "recognized" usability principles

Heuristics evaluations are best during late production, as they can identify many problems with a system very quickly, but can be costly to undergo if done too early.

There's a difference between expert judgement and opinion, and you should know which you are getting when you are going through an evaluation. Frameworks help normalize these differences.

##Classic Heuristics

**The Golden 10**

1. Visibility of system status
    2. Often applied to navigation-intensive systems
    3. Users need to know where they are, what's happening
    4. Each page should be clearly branded and indicate which section it belongs to
    5. Users could be jumping to any part of website from somewhere else
3. Match between system and the real world
    4. Follow real-world conventions for labels, icons, language used
    5. User profile dependent consideration
    6. Avoid technological jargon
    7. Very general principle but still very relevant
5. User control and freedom
    6. Users should never be held captive by the application
    6. Users often choose system functions by mistake
        7. 'emergency exit'
        8. Support undo and redo
        9. Clarify undoable operations
    10. Many emergency exits are provided by the browser or the medium, but rich internet applications often have their own internal nav logic
    11. Home button on every page
    12. Support mechanisms to skip, control, exit animations and media
7. Consistency and standards
    8. users should not have to wonder whether different words, situations or actions mean the same thing
    9. Do not reinvent existing system or conventions, follow them consistently
    10. same user action should trigger the same system response in every context
    11. There should be consistency among graphics and page layout patterns, as well as navigation functions
    12. Regularity of the user experience is fundamental
9. Error prevention
    10. Even better than a good error message is a careful design that prevents a problem from occurring in the first place
    11. Defensive design: do not induce users in error, prevent error by design
    12. Critical from operational and transaction tasks
11. Recognition rather than recall
    12. Make objects, actions and options visible
    13. Users should not have to remember information from one part of dialogue to another. Redundant design is good.
    14. Instructions for use of system should be visible or easily retrievable whenever appropriate
    15. Closely related to system status
13. Flexibility and efficiency of use
    14. Accelerators - unseen by novice user - may speed up interaction for the expert user such that the system can cater to both inexperienced and experienced users
    15. Allow users to tailor frequent actions
    16. scenario-based reasoning; first time users vs frequent users
15. Aesthetic and minimalist design
    16. dialogues should not contain irrelevant or rarely needed information
    17. Every extraneous action competes with what is relevant
    18. Provide different levels of reading depth
    19. One interaction unit to one key message or purpose
17. Help users recognize, diagnose, and recover from errors
18. Help and documentation
    19. for some more complicated systems, it may be necessary to provide help and documentation
    20. such info should be easy to search, focused on the tasks, possibly contextual and list concrete steps for execution

Remember, *you are not the user*

In task-based evaluations, make your tasks very specific, engage as many mechanics as you can

###Additional heuristics:
- Visual clarity
    - maximize info recognition and retention, typographical clarity, the visual language must enable users to perceive and understand the message
    - designers should be concerned with typographic clarity from a human factors perspective
    - based on legibility, readability, chunking
- Inverted Pyramid

###Severity ratings

The degree of severity of a usability problem can be determined by a combination of 3 factors:

- Frequency with which the problem occurs
- The impact of the problem when it occurs
- The persistence of the problem
- Significance of the problem for the purpose, mission and goals of application
    - critical to communication and business goals

####Scale

1. Superficial error
    2. doesn't need fixing unless extra time is available
3. Minor usability error
    4. fixing should be given low priority
5. Major usability error
    6. correction is important and should have a high priority
7. Catastrophic emergency
    8. error must be made immediately before release (or, usually, after)

